{"title":"Java基础复习简要总结（黑马视频）","uid":"8c96df63a0315585096b5e2bf6169ee7","slug":"Java基础复习简要总结","date":"2022-08-07T03:30:37.000Z","updated":"2023-09-07T01:54:31.944Z","comments":true,"path":"api/articles/Java基础复习简要总结.json","keywords":null,"cover":null,"content":"<p>为了打好基础，我跟着Java黑马教程学习一段时间，现在将Java基础与面对对象知识进行总结并标记重要地方（主要对自己不太了解的知识总结）</p>\n<p>视频来源：<a href=\"https://www.bilibili.com/video/BV17F411T7Ao/?spm_id_from=333.337.search-card.all.click\">黑马程序员Java零基础视频教程_上部(Java入门，含斯坦福大学练习题+力扣算法题和大厂java面试题）_哔哩哔哩_bilibili</a></p>\n<h3 id=\"面向对象-就近原则和this关键字、构造方法\"><a href=\"#面向对象-就近原则和this关键字、构造方法\" class=\"headerlink\" title=\"面向对象-就近原则和this关键字、构造方法\"></a>面向对象-就近原则和this关键字、构造方法</h3><ul>\n<li><p>this表示当前对象的地址</p>\n<ul>\n<li><p>this可以区分成员变量和局部变量</p>\n</li>\n<li><p>this 本质 代表方法调用者的地址值，Car c &#x3D; new Car()上，c和this的地址值是一样的，所以指代的也一样。</p>\n</li>\n</ul>\n</li>\n<li><p>就近原则 指的是谁离我近，就用谁</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">show1</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">age</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    age </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>根据就近原则，左边的age算是局部变量，age&#x3D;null，所以返回null</p>\n</li>\n<li><p>构造方法的作用：</p>\n<ul>\n<li><p>给成员变量进行初始化，返回其地址</p>\n</li>\n<li><p>Car c &#x3D; new Car() c保存的是地址。（看面向对象-07的对象内存图）</p>\n</li>\n</ul>\n</li>\n<li><p>标准的JavaBean类（只是一个有特定要求的类而已，类似的有工具类）</p>\n<ul>\n<li><p>类名需要见名知意</p>\n</li>\n<li><p>成员变量至少需要用private修饰</p>\n</li>\n<li><p>提供至少2个构造方法，比如无参构造和带全部参数的构造</p>\n</li>\n<li><p>成员方法：提供每一个成员变量所提供的setXxxx()和getXxxx()，如果还其他行为，一并写上。</p>\n</li>\n<li><p>在IDEA上，可以邮件 有PTG to javabean。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"面向对象-07-三种情况的对象内存图【重要-看视频-面试】需要看JVM\"><a href=\"#面向对象-07-三种情况的对象内存图【重要-看视频-面试】需要看JVM\" class=\"headerlink\" title=\"面向对象-07 三种情况的对象内存图【重要 看视频 面试】需要看JVM\"></a>面向对象-07 三种情况的对象内存图【重要 看视频 面试】需要看JVM</h3><h3 id=\"面向对象-09-this的内存原理【看视频】\"><a href=\"#面向对象-09-this的内存原理【看视频】\" class=\"headerlink\" title=\"面向对象-09 this的内存原理【看视频】\"></a>面向对象-09 this的内存原理【看视频】</h3><h3 id=\"面向对象进阶-03-static的注意事项，-02也可以看看一下\"><a href=\"#面向对象进阶-03-static的注意事项，-02也可以看看一下\" class=\"headerlink\" title=\"面向对象进阶-03 static的注意事项， 02也可以看看一下\"></a>面向对象进阶-03 static的注意事项， 02也可以看看一下</h3><ul>\n<li><p>总结</p>\n<ul>\n<li><p>静态方法没有this</p>\n</li>\n<li><p>静态方法只能访问静态，因为静态随类加载而加载，此时对象可能未加载，所以没法访问</p>\n</li>\n<li><p>非静态方法可以访问任意</p>\n</li>\n<li><p><em>静态属于类，不属于对象</em></p>\n</li>\n</ul>\n</li>\n<li><p>非静态方法有一个隐藏的this</p>\n<ul>\n<li><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">show1</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Student</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">this)&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"多线程-同步代码块-多线程-08\"><a href=\"#多线程-同步代码块-多线程-08\" class=\"headerlink\" title=\"多线程 同步代码块 多线程 08\"></a>多线程 同步代码块 多线程 08</h3><ul>\n<li><p>把操作共享数据（比如用static定义的变量等）的代码锁起来。</p>\n</li>\n<li><p>static定义的变量和方法可以被所有对象共享。</p>\n</li>\n<li><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">synchronized</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">锁对象</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>最好在循坏内，否则会成单线程 具体见多线程-08</p>\n<p>看PPT的总结</p>\n<ul>\n<li><p>对于实例方法建议使用this作为锁对象。</p>\n</li>\n<li><p>对于静态方法建议使用字节码（类名.class）对象作为锁对象。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"多线程-同步方法\"><a href=\"#多线程-同步方法\" class=\"headerlink\" title=\"多线程 同步方法\"></a>多线程 同步方法</h3><ul>\n<li><p>就是把synchronized关键字加到方法上。</p>\n</li>\n<li><p>用Runnable创建进程对象时，因为只构建一个对象，所以成员变量不需要添加static作为共享变量。</p>\n</li>\n</ul>\n<h3 id=\"多线程-Lock锁\"><a href=\"#多线程-Lock锁\" class=\"headerlink\" title=\"多线程 Lock锁\"></a>多线程 Lock锁</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">lock</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">lock</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">lock</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">unlock</span><span style=\"color: #89DDFF\">()</span></span></code></pre></div><ul>\n<li><p>要保证所有对象共享同一把锁。</p>\n</li>\n<li><p>用Thread创建多个线程时，需要对Lock对对象添加static</p>\n</li>\n<li><p>使用try-catch-finally</p>\n</li>\n</ul>\n<h3 id=\"多线程-死锁\"><a href=\"#多线程-死锁\" class=\"headerlink\" title=\"多线程 死锁\"></a>多线程 死锁</h3><ul>\n<li>注意安排好线程的先后，否则会卡死</li>\n</ul>\n<h3 id=\"多线程-线程池-多线程-29\"><a href=\"#多线程-线程池-多线程-29\" class=\"headerlink\" title=\"多线程 线程池 多线程 29\"></a>多线程 线程池 多线程 29</h3><ul>\n<li>线程池是线程的复用技术</li>\n<li>1、创建线程池。2、提交任务，池子会创建新的线程对象，任务执行完毕，线程归还给池子，下次提交任务时，不需要创建线程，只需要复用线程即可。3、池子中没有空闲线程时，也无法创建新的线程时，任务就排队等待。4、所有任务执行完毕时，会关闭线程池。</li>\n</ul>\n","text":"为了打好基础，我跟着Java黑马教程学习一段时间，现在将Java基础与面对对象知识进行总结并标记重要地方（主要对自己不太了解的知识总结） 视频来源：黑马程序员J...","permalink":"/post/Java基础复习简要总结","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%B1%E8%BF%91%E5%8E%9F%E5%88%99%E5%92%8Cthis%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">面向对象-就近原则和this关键字、构造方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-07-%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE%E3%80%90%E9%87%8D%E8%A6%81-%E7%9C%8B%E8%A7%86%E9%A2%91-%E9%9D%A2%E8%AF%95%E3%80%91%E9%9C%80%E8%A6%81%E7%9C%8BJVM\"><span class=\"toc-text\">面向对象-07 三种情况的对象内存图【重要 看视频 面试】需要看JVM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-09-this%E7%9A%84%E5%86%85%E5%AD%98%E5%8E%9F%E7%90%86%E3%80%90%E7%9C%8B%E8%A7%86%E9%A2%91%E3%80%91\"><span class=\"toc-text\">面向对象-09 this的内存原理【看视频】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-03-static%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%8C-02%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9C%8B%E7%9C%8B%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\">面向对象进阶-03 static的注意事项， 02也可以看看一下</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97-%E5%A4%9A%E7%BA%BF%E7%A8%8B-08\"><span class=\"toc-text\">多线程 同步代码块 多线程 08</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">多线程 同步方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B-Lock%E9%94%81\"><span class=\"toc-text\">多线程 Lock锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">多线程 死锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B-29\"><span class=\"toc-text\">多线程 线程池 多线程 29</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"(数学)A. Restoring Three Numbers","uid":"1430b8946bb971c1a1aa8572d387e43f","slug":"数学-A-Restoring-Three-Numbers","date":"2022-10-06T03:19:50.000Z","updated":"2023-09-06T07:13:23.178Z","comments":true,"path":"api/articles/数学-A-Restoring-Three-Numbers.json","keywords":null,"cover":null,"text":"这个是一个数学题。不过不必是暴力的。 题目链接：Problem - 1154A - Codeforces A. Restoring Three NumbersP...","permalink":"/post/数学-A-Restoring-Three-Numbers","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"刷题：Math","slug":"刷题：Math","count":1,"path":"api/tags/刷题：Math.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"scrapy提交表单——爬取火熊网最新上传一栏并下载图片","uid":"f266ddc468c37e3de2feebaa8ae419d6","slug":"scrapy提交表单——爬取火熊网最新上传一栏并下载图片","date":"2021-07-10T05:01:57.000Z","updated":"2023-09-06T07:12:57.920Z","comments":true,"path":"api/articles/scrapy提交表单——爬取火熊网最新上传一栏并下载图片.json","keywords":null,"cover":[],"text":"前言我起初在爬这个火熊网却发现这个是JS加载，所以我就打开谷歌开发者工具，查看XHR，找到了http://cgartt.com/api/api.php?d=in...","permalink":"/post/scrapy提交表单——爬取火熊网最新上传一栏并下载图片","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"爬虫","slug":"爬虫","count":6,"path":"api/tags/爬虫.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}