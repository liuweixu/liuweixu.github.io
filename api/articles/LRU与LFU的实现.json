{"title":"LRU与LFU的实现","uid":"9f1275f199e127f24dd271fc7f7f6a6f","slug":"LRU与LFU的实现","date":"2023-09-14T01:29:24.000Z","updated":"2023-09-26T02:07:58.847Z","comments":true,"path":"api/articles/LRU与LFU的实现.json","keywords":null,"cover":null,"content":"<p>参考资料：<a href=\"https://xiaolincoding.com/redis/base/redis_interview.html#lru-%E7%AE%97%E6%B3%95%E5%92%8C-lfu-%E7%AE%97%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\">Redis 常见面试题 | 小林coding (xiaolincoding.com)</a></p>\n<h3 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h3><p>LRU 与 LFU 都是缓存机制，也是 Redis 缓存淘汰机制的重要实现，在 Redis 4.0 前使用的缓存机制是 LRU，即<strong>最近最少使用</strong>，会选择淘汰最近最少使用的数据。</p>\n<h4 id=\"传统-LRU\"><a href=\"#传统-LRU\" class=\"headerlink\" title=\"传统 LRU\"></a>传统 LRU</h4><p><strong>传统 LRU</strong> 算法的实现是基于「链表」结构，链表中的元素按照操作顺序从前往后排列，最新操作的键会被移动到表头，当需要内存淘汰时，只需要删除链表尾部的元素即可，因为链表尾部的元素就代表最久未被使用的元素。</p>\n<p>Redis 并没有使用这样的方式实现 LRU 算法，因为传统的 LRU 算法存在<strong>两个问题</strong>：</p>\n<ul>\n<li>需要用链表管理所有的缓存数据，这会带来<strong>额外的空间开销</strong>；</li>\n<li>当有数据被访问时，需要在链表上把该数据移动到头端，如果有大量数据被访问，就会带来很多链表移动操作，会<strong>很耗时</strong>，进而会降低 Redis 缓存性能。</li>\n</ul>\n<h4 id=\"Redis-的-LRU\"><a href=\"#Redis-的-LRU\" class=\"headerlink\" title=\"Redis 的 LRU\"></a>Redis 的 LRU</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>然后 Redis 如何实现 LRU 算法？</p></blockquote>\n<p>Redis 实现的是一种<strong>近似 LRU 算法</strong>，目的是为了更好的节约内存，它的<strong>实现方式是在 Redis 的对象结构体中添加一个额外的字段，用于记录此数据的最后一次访问时间</strong>。</p>\n<p>当 Redis 进行内存淘汰时，会使用<strong>随机采样的方式来淘汰数据</strong>，它是随机取 5 个值（此值可配置），然后<strong>淘汰最久没有使用的那个</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Redis 实现的 LRU 算法的优点：</p></blockquote>\n<ul>\n<li>不用为所有的数据维护一个大链表，节省了空间占用；</li>\n<li>不用在每次数据访问时都移动链表项，提升了缓存的性能；</li>\n</ul>\n<h4 id=\"LRU-的问题\"><a href=\"#LRU-的问题\" class=\"headerlink\" title=\"LRU 的问题\"></a>LRU 的问题</h4><p>但是 LRU 算法有一个问题，<strong>无法解决缓存污染问题</strong>，比如应用一次读取了大量的数据，而这些数据只会被读取这一次，那么这些数据会留存在 Redis 缓存中很长一段时间，造成缓存污染。</p>\n<h3 id=\"LFU\"><a href=\"#LFU\" class=\"headerlink\" title=\"LFU\"></a>LFU</h3><p>为了解决上述的缓存污染问题，Redis 4,0 引入 LFU 算法。</p>\n<h4 id=\"LFU含义\"><a href=\"#LFU含义\" class=\"headerlink\" title=\"LFU含义\"></a>LFU含义</h4><p>LFU 全称是 Least Frequently Used 翻译为<strong>最近最不常用的</strong>，LFU 算法是根据数据访问次数来淘汰数据的，它的核心思想是“如果数据过去被访问多次，那么将来被访问的频率也更高”。</p>\n<p>所以， LFU 算法会记录每个数据的访问次数。当一个数据被再次访问时，就会增加该数据的访问次数。这样就解决了偶尔被访问一次之后，数据留存在缓存中很长一段时间的问题，相比于 LRU 算法也更合理一些。</p>\n<h4 id=\"LFU的实现\"><a href=\"#LFU的实现\" class=\"headerlink\" title=\"LFU的实现\"></a>LFU的实现</h4><p>LFU 算法相比于 LRU 算法的实现，多记录了「数据的访问频次」的信息。</p>\n<h3 id=\"程序实现\"><a href=\"#程序实现\" class=\"headerlink\" title=\"程序实现\"></a>程序实现</h3><h4 id=\"LRU-1\"><a href=\"#LRU-1\" class=\"headerlink\" title=\"LRU\"></a>LRU</h4><p>题型来源：<a href=\"https://leetcode.cn/problems/lru-cache/description/\">146. LRU 缓存 - 力扣（LeetCode）</a></p>\n<p>LRU 的实现主要使用双向链表和哈希表，其中双向链表用于保存缓存数据，而哈希表则是用于快速判断缓存数据是否存在。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为什么使用双向链表？</p></blockquote>\n<p>答：之所以要用双向链表，这是因为为了能够让其删除头部和尾部元素时的时间复杂度能够为 $O(1)$。</p>\n<p>在构建双向链表的类时，需要构建三个方法：添加头部元素、删除已知的节点和删除尾部节点。</p>\n<p>然后构建 LRU 类时，需要构建二个方法：get 和 put。</p>\n<p>在 get 方法上，主要有 2 种可能，即使用哈希表查不到元素和查到了元素。如果查不到元素，就直接返回 -1，而如果查到了，需要将这个结点移动到链表的开头（为了让最近最久未使用的节点放在链表的末尾）。</p>\n<p>在 put 方法上，也有 2 种可能，查到元素和查不到元素。 如果查到元素，就把这个结点移动到链表的开头。如果查不到，就在链表的开头加这个元素，如果链表的长度超过容量，还需要删除尾部元素。</p>\n<p>程序实现（Leetcode版本）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/*</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * @lc app=leetcode.cn id=146 lang=java</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> *</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * [146] LRU 缓存</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">*</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// @lc code=start</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">LRUCache</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 双向链表的节点定义</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Node</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">()&#123;&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">value</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">key </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">DLinkedList</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">DLinkedList</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            head </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            tail</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//头部添加 head &lt;-&gt; 1 &lt;-&gt; 2 &lt;-&gt; tail;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">newFirst</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> oldFirst </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            newFirst</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            newFirst</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> oldFirst</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> newFirst</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            oldFirst</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> newFirst</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//已知节点删除</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">node</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            prev</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            next</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//尾部节点删除</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">removeLast</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> last </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">last</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> last</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> hashMap </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">DLinkedList</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">DLinkedList</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> capacity</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 初始化</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">LRUCache</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">capacity</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">capacity </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> capacity</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        head </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//创建新的节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        tail </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 创建新的节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        tail</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">/*</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * 2种可能</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * 返回的是查到的节点的值，如果查到，要将这个结点移动到链表的开头</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">hashMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">containsKey</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">))&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> hashMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * 增加节点 2种可能</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * 需要考虑容量的问题</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * </span><span style=\"color: #F78C6C; font-style: italic\">@param</span><span style=\"color: #676E95; font-style: italic\"> </span><span style=\"color: #BABED8; font-style: italic\">key</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * </span><span style=\"color: #F78C6C; font-style: italic\">@param</span><span style=\"color: #676E95; font-style: italic\"> </span><span style=\"color: #BABED8; font-style: italic\">value</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">value</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">hashMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">containsKey</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">))&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> hashMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            hashMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">hashMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> capacity</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> last </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">removeLast</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                hashMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">last</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * Your LRUCache object will be instantiated and called as such:</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * LRUCache obj = new LRUCache(capacity);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * int param_1 = obj.get(key);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * obj.put(key,value);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// @lc code=end</span></span>\n<span class=\"line\"></span></code></pre></div><h4 id=\"LFU-1\"><a href=\"#LFU-1\" class=\"headerlink\" title=\"LFU\"></a>LFU</h4><p>题型来源：<a href=\"https://leetcode.cn/problems/lfu-cache/description/\">460. LFU 缓存 - 力扣（LeetCode）</a></p>\n<p>和 LRU 的实现相比， LFU 的实现难度其实更大。</p>\n<p>LFU 的实现需要使用一个双向链表和 2 个哈希表，双向链表是用于保存数据的，而哈希表一个（用 kvMap 表示）是用来判断缓存数据是否存在，而另一个哈希表（用 freqMap 表示）上，key 表示缓存的次数，而 value 则是双向链表，这是为了能够在缓存次数一样时，就直接按照 LRU 的方法删除最近最久未使用的元素。</p>\n<p>在构建双向链表的类时，需要构建四个方法：添加头部元素、删除已知的节点、删除尾部节点和判断链表是否为空。</p>\n<p>然后构建 LRU 类时，需要构建二个方法：get 和 put。</p>\n<p>在 get 方法上，主要有 2 种可能，即使用 kvMap 查不到元素和查到了元素。如果查不到元素，就直接返回 -1，而如果查到了，需要在 freqMap 上对相应的查找次数上的链表上，将该元素删除，然后将该元素的查找次数 + 1，接着将该元素移动到新的查找次数下的链表的开头。</p>\n<p>在 put 方法上，也有 2 种可能，KvMap 查到元素和查不到元素。 如果查到元素，操作和 get 方法查到的元素一样。如果查不到，首先子在 kvMap 上添加该元素，然后判断 freqMap 上的 key 为 1 的链表是否存在，如果不存在，就新建一个，然后将该元素添加到这个链表的开头。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/*</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * @lc app=leetcode.cn id=460 lang=java</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> *</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * [460] LFU 缓存</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// @lc code=start</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">LFUCache</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Node</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> freq</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">()&#123;&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">value</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">key </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">DLinkedList</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">DLinkedList</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            head </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            tail</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            size </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//头部添加 head &lt;-&gt; 1 &lt;-&gt; 2 &lt;-&gt; tail;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">newFirst</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> oldFirst </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            newFirst</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            newFirst</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> oldFirst</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> newFirst</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            oldFirst</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> newFirst</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            size</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//已知节点删除</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">node</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            prev</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> next</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            next</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            size</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//尾部节点删除</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">removeLast</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> last </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">last</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> last</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//判断是否是空</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> size </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> capacity</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> kvMap </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">DLinkedList</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> freqMap </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">HashMap</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> minFreq </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> size</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">LFUCache</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">capacity</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">capacity </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> capacity</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        head </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//创建新的节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        tail </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 创建新的节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        head</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tail</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        tail</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">prev </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> head</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        size </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">kvMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">containsKey</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">))&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> kvMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> minFreq</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            minFreq</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// DLinkedList list = freqMap.get(node.freq);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// if(list == null)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//     list = new DLinkedList();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//     freqMap.put(node.freq, list);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// list.addFisrt(node);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">computeIfAbsent</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> k </span><span style=\"color: #C792EA\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">DLinkedList</span><span style=\"color: #89DDFF\">()).</span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">value</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">kvMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">containsKey</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">))&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> kvMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> minFreq</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                minFreq</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">DLinkedList</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">list </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">DLinkedList</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// freqMap.computeIfAbsent(node.freq, k -&gt; new DLinkedList()).addFisrt(node);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">kvMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> capacity</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">minFreq</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">removeLast</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                kvMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #BABED8\"> node </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Node</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            kvMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">DLinkedList</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">list </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">DLinkedList</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                freqMap</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">addFisrt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">node</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            node</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">freq </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// freqMap.computeIfAbsent(1, k-&gt;new DLinkedList()).addFisrt(node);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            minFreq </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * Your LFUCache object will be instantiated and called as such:</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * LFUCache obj = new LFUCache(capacity);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * int param_1 = obj.get(key);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * obj.put(key,value);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// @lc code=end</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div>","text":"参考资料：Redis 常见面试题 | 小林coding (xiaolincoding.com) LRULRU 与 LFU 都是缓存机制，也是 Redis 缓存淘...","permalink":"/post/LRU与LFU的实现","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"},{"name":"LRU","slug":"LRU","count":1,"path":"api/tags/LRU.json"},{"name":"LFU","slug":"LFU","count":1,"path":"api/tags/LFU.json"},{"name":"刷题","slug":"刷题","count":9,"path":"api/tags/刷题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LRU\"><span class=\"toc-text\">LRU</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E7%BB%9F-LRU\"><span class=\"toc-text\">传统 LRU</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Redis-%E7%9A%84-LRU\"><span class=\"toc-text\">Redis 的 LRU</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LRU-%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">LRU 的问题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LFU\"><span class=\"toc-text\">LFU</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LFU%E5%90%AB%E4%B9%89\"><span class=\"toc-text\">LFU含义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LFU%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">LFU的实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">程序实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LRU-1\"><span class=\"toc-text\">LRU</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LFU-1\"><span class=\"toc-text\">LFU</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"二分查找的记录","uid":"9d323d77d023dce580918223b263aee7","slug":"二分查找的记录","date":"2023-09-14T12:30:33.000Z","updated":"2023-09-25T14:46:51.483Z","comments":true,"path":"api/articles/二分查找的记录.json","keywords":null,"cover":null,"text":"二分查找程序在二分查找上，根据区间的确定，主要有二种不同的写法：左闭右闭，左闭右开。 在左闭右闭上，需要在 while 循环内满足 $left \\leq rig...","permalink":"/post/二分查找的记录","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"},{"name":"刷题","slug":"刷题","count":9,"path":"api/tags/刷题.json"},{"name":"二分","slug":"二分","count":1,"path":"api/tags/二分.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"（Java复习总结）JVM简要总结","uid":"7668b55f818985386793a5565052eec1","slug":"（Java复习总结）JVM简要总结","date":"2023-09-02T06:01:29.000Z","updated":"2023-09-07T06:11:11.598Z","comments":true,"path":"api/articles/（Java复习总结）JVM简要总结.json","keywords":null,"cover":[],"text":"复习资料：二哥的Java进阶之路x沉默王二 | 二哥的Java进阶之路 (javabetter.cn) 字节码字节码 Java分为编译时与运行时，而字节码与编译...","permalink":"/post/（Java复习总结）JVM简要总结","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}