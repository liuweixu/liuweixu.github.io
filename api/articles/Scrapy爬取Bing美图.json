{"title":"Scrapy爬取Bing美图","uid":"74b3c9299a9d2a5ecfa2b1ca58a5ff0a","slug":"Scrapy爬取Bing美图","date":"2021-07-10T04:59:38.000Z","updated":"2023-09-06T07:12:36.297Z","comments":true,"path":"api/articles/Scrapy爬取Bing美图.json","keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n\n<p>这个是Image Pipeline 练习</p>\n<h4 id=\"确定爬取的目标\"><a href=\"#确定爬取的目标\" class=\"headerlink\" title=\"确定爬取的目标\"></a>确定爬取的目标</h4><p>我们要爬取的是Bing美图，<a href=\"http://bing.plmeizi.com/\">Bing今日美图</a>，我们可以发现，这个网页没有ajax加载，有页面，其中URL里面只有页码不同，可以考虑先爬取页面的信息，然后在每个页面爬取每个图片的链接赋值给item。</p>\n<h4 id=\"开始编写代码\"><a href=\"#开始编写代码\" class=\"headerlink\" title=\"开始编写代码\"></a>开始编写代码</h4><ul>\n<li><p>创建item</p>\n<div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Define here the models for your scraped items</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># See documentation in:</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># https://docs.scrapy.org/en/latest/topics/items.html</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> scrapy</span></span></code></pre></div><p>class BingItem(scrapy.Item):</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\"># define the fields for your item here like:</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"># name = scrapy.Field()</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"># 图片标题</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">title = scrapy.Field()</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"># 图片链接</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">url = scrapy.Field()</span></span></code></pre></div></li>\n</ul>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">建立图片的标题和链接作为“键”。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">- spiders/bing_images.py</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">```python</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">import scrapy</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">from Bing.items import BingItem</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">class BingImagesSpider(scrapy.Spider):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    name = &#39;bing_images&#39;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    allowed_domains = [&#39;bing.plmeizi.com&#39;]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    start_urls = [&#39;http://bing.plmeizi.com/&#39;]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    def parse(self, response):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        base_url = &quot;http://bing.plmeizi.com/?page=&quot;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        for page in range(1, 129):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            url = base_url + str(page)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            yield scrapy.Request(url, callback=self.parse)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        # 这个有必要进行循环，因为在pipeline.py 中scrapy.Request()里面的url是需要url的，而不是一个列表的。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        for image in response.css(&quot;.clearfix .item&quot;):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            item = BingItem()</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            item[&#39;url&#39;] = image.css(&quot;div img::attr(src)&quot;).extract_first()</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            item[&#39;title&#39;] = image.css(&quot;p::text&quot;).extract_first()</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            yield item</span></span></code></pre></div><p>  这个代码中，我们先循环获取1到128页的页面的源代码，回调到parse()中，然后用response.css()获取每个页面的的图片的链接和标题。注意，这个也需要循环，因为接下来的pipeline.py中的scrapyRequest()里面的URL是一个一个的，不是列表的。</p>\n<ul>\n<li><p>pipelines.py</p>\n<div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Define your item pipelines here</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> scrapy</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">pipelines</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">images </span><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> ImagesPipeline</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> scrapy</span></span></code></pre></div><p>class BingPipeline(ImagesPipeline):</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\"># def process_item(self, item, spider):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">#     return item</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\"># 用来确定图片的文件名。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">def file_path(self, request, response=None, info=None):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    # 由于标题过长，会分成自动分成两半，前面的部作为文件夹的名字，后面的部分作为图片的名字。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    # 所以，我们有必要进行删除一些不必要的名字的部分，可以发现，这些标题基本是在后面有一个括号，我们可以删去</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    # 这些无关紧要的括号就行。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    file_name = request.meta[&#39;meta&#39;][&#39;title&#39;].split(&quot;(&quot;)[0] + &quot;.png&quot;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    return file_name</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">def item_completed(self, results, item, info):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    image_paths = [x[&#39;path&#39;] for ok, x in results if ok]</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    if not image_paths:</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        raise scrapy.DropItem(&#39;Image Download Failed&#39;)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    return item</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">def get_media_requests(self, item, info):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    yield scrapy.Request(url=item[&#39;url&#39;], meta=&#123;&#39;meta&#39;: item&#125;)</span></span></code></pre></div></li>\n</ul>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">注意先导入ImagesPipeline，并且BingPipeline需要**继承**ImagesPipeline，这个是必须的。然后就是重写file_path()、item_completed()和get_media_requests()。其中file_path()就是确定图片的文件名，不过这个文件名需要处理下，因为这个得到的文件名过长。在item_completed()中，是用来确定当爬取图片失败后的返回警告信息。而get_media_requests()是用来处理spider传递过来的每个item。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">- settings.py</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">```python</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">ROBOTSTXT_OBEY = False</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">ROBOTSTXT_OBEY = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">   &#39;Bing.pipelines.BingPipeline&#39;: 300,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">IMAGES_STORE = &quot;./images&quot;</span></span></code></pre></div><p>  需要对ROBOTSTXT_OBEY和ROBOTSTXT_OBEY去掉注释。然后添加IMAGES_STORE，作为保存的文件夹。</p>\n<h4 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h4><p>这些完整的代码见于 <a href=\"https://github.com/liuweixu/Python-crawler/tree/master/Scrapy/Bing%E7%BE%8E%E5%9B%BE/Bing\">Github</a></p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li>《Python3 网络爬虫开发实战》崔庆才</li>\n</ul>\n","text":" 这个是Image Pipeline 练习 确定爬取的目标我们要爬取的是Bing美图，Bing今日美图，我们可以发现，这个网页没有ajax加载，有页面，其中UR...","permalink":"/post/Scrapy爬取Bing美图","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"爬虫","slug":"爬虫","count":6,"path":"api/tags/爬虫.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E5%AE%9A%E7%88%AC%E5%8F%96%E7%9A%84%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">确定爬取的目标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">开始编写代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Github\"><span class=\"toc-text\">Github</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"scrapy提交表单——爬取火熊网最新上传一栏并下载图片","uid":"f266ddc468c37e3de2feebaa8ae419d6","slug":"scrapy提交表单——爬取火熊网最新上传一栏并下载图片","date":"2021-07-10T05:01:57.000Z","updated":"2023-09-06T07:12:57.920Z","comments":true,"path":"api/articles/scrapy提交表单——爬取火熊网最新上传一栏并下载图片.json","keywords":null,"cover":[],"text":"前言我起初在爬这个火熊网却发现这个是JS加载，所以我就打开谷歌开发者工具，查看XHR，找到了http://cgartt.com/api/api.php?d=in...","permalink":"/post/scrapy提交表单——爬取火熊网最新上传一栏并下载图片","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"爬虫","slug":"爬虫","count":6,"path":"api/tags/爬虫.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"scrapy爬取笔趣看的小说","uid":"acb53f06d1c58527ddd8b9d7be584840","slug":"scrapy爬取笔趣看的小说","date":"2021-07-07T04:47:28.000Z","updated":"2023-09-06T07:12:47.845Z","comments":true,"path":"api/articles/scrapy爬取笔趣看的小说.json","keywords":null,"cover":null,"text":"前言之前用了requests和Beautifulsoup爬取笔趣看的小说了《极品家丁》，不过现在用爬虫框架——Scrapy爬取，这个框架比较好用，自带分布式，可...","permalink":"/post/scrapy爬取笔趣看的小说","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"爬虫","slug":"爬虫","count":6,"path":"api/tags/爬虫.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}