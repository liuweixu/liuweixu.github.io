{"title":"（开发笔记）平台开发总结记录（随时间更新）","uid":"378ef04860d0061ea328fa054dbf3d74","slug":"（开发笔记）平台开发总结记录（随时间更新）","date":"2023-05-07T02:32:25.000Z","updated":"2023-09-07T02:52:55.384Z","comments":true,"path":"api/articles/（开发笔记）平台开发总结记录（随时间更新）.json","keywords":null,"cover":null,"content":"<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><ul>\n<li>查看是否登录时，一般会看看线程是否有这个用户（网关处理时会把数据保存到线程上）</li>\n</ul>\n<h2 id=\"MP\"><a href=\"#MP\" class=\"headerlink\" title=\"MP\"></a>MP</h2><ul>\n<li>要掌握如何进行分页  <ul>\n<li>MP在处理多个表时，有时用xml更好，尤其是在查询列表时</li>\n</ul>\n</li>\n<li>项目审核上  <ul>\n<li>一般需要一个公共的方法，外加一个code，表示审核失败和审核成功  </li>\n<li>查询验证信息 就是查询是否对象是否存在</li>\n</ul>\n</li>\n<li>进行消息传递时，如果需要传递类，可以用HashMap包装</li>\n</ul>\n<h2 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h2><ul>\n<li>Mono类  </li>\n<li>拦截器 过滤器  </li>\n<li>要加上@Component  </li>\n<li>获取用户的方法  <ul>\n<li>利用网关过滤器，将登录信息包装到thread，然后可以直接读取该thread的信息，得到用户的信息  </li>\n<li>根据传过来的json信息来得到用户的信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><ul>\n<li>AppThreadLocalUtil  </li>\n<li>线程读取用户的id  </li>\n<li>重要，需要认真学习</li>\n</ul>\n<h2 id=\"延迟任务-用于处理文章定时审核和上架\"><a href=\"#延迟任务-用于处理文章定时审核和上架\" class=\"headerlink\" title=\"延迟任务 用于处理文章定时审核和上架\"></a>延迟任务 用于处理文章定时审核和上架</h2><ul>\n<li>延迟任务的实现  <ul>\n<li>用的是Redis的延迟队列，其中有2个队列，当前队列和未来队列  </li>\n<li>需要用上乐观锁  </li>\n<li>也可以用RabbitMQ</li>\n</ul>\n</li>\n<li>分布式锁的解决方案（<strong>因为@Schedule存在做集群任务的重复执行问题，后续的xxl-job任务可以解决</strong>）  <ul>\n<li>SETNX 用的是StringRedisTemplate</li>\n</ul>\n</li>\n<li>定时刷新  <ul>\n<li>未来任务定时刷新到当前任务  <ul>\n<li>是在redis上的处理，就是先清楚掉未来任务的数据（zset），然后将这个数据加入到当前队列（list）</li>\n</ul>\n</li>\n<li>数据库定时刷新到redis（即数据库定时同步到redis）  <ul>\n<li>要先清理缓存中的数据，然后从数据库中查询符合条件的数据，并加入到redis</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>GetMapping 和 PostMapping的区别是GetMapping上的连接必须有占位符，即{}，并且参数要有@PathVariable。这个与Http的Get请求特点有关的。  </li>\n<li>延迟任务上，使用的序列化方法是Protostuff，特点是比Jdk的序列化方法快  </li>\n<li>延迟任务上，会使用到的@Scheduled注解，里面用上2个参数  <ul>\n<li>cron  </li>\n<li>fixedRate  </li>\n<li>然后会用上EnableScheduling注解，用于开启调度任务</li>\n</ul>\n</li>\n<li>在文章审核上，需要使用@Asyns实现异步调用，保证文章微服务挂掉时，不影响文章的审核（自媒体的微服务部分）  </li>\n<li>区分延迟任务和定时任务</li>\n</ul>\n<h2 id=\"Kafka-用于通知文章上下架\"><a href=\"#Kafka-用于通知文章上下架\" class=\"headerlink\" title=\"Kafka 用于通知文章上下架\"></a>Kafka 用于通知文章上下架</h2><ul>\n<li>自媒体文章上下架  <ul>\n<li>自媒体微服务如何通知文章微服务？？  <ul>\n<li>Feign远程调用 有耦合性  </li>\n<li>消息队列 RabbitMQ Kafka 系统解耦 流量削峰  </li>\n<li>KafkaProducer 创建Kafka对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Kafka入门  <ul>\n<li>程序设置  生产者和消费者<ul>\n<li>写程序时需要先用Properties创建配置类（<strong>也可以写入yml配置文件</strong>），里面保存连接信息，key和value的序列化或反序列化，另外消费者还需要添加消费者组，其使用的重要参数有：1. 连接信息。2. key和value的序列化或反序列化。3. ack 消息确认机制 开发中不会专门去设置 默认 ack&#x3D;1。4. retries 尝试重试次数 一般设置10次。5. 消息压缩 snappy</li>\n<li>创建生产者对象或消费者对象 传入配置类</li>\n<li>发送消息或订阅主题并拉取消息</li>\n<li>生产者还需要关闭消息通道</li>\n</ul>\n</li>\n<li>消费者组  <ul>\n<li>一对一接收 同一个消费者组有多个消费者就行 （Topic中的一个消费者组的消息只能由一个消费者消费，这也保证消息的有序性）  </li>\n<li>而一对多时，只需要将不同的消费者放在不同的消费组就行  </li>\n<li>消费组的设置：ConsumerConfig类</li>\n</ul>\n</li>\n<li>Kafka的分区设计和高可用设计 这一块需要查阅资料  </li>\n<li>Kafka的生产者上，有同步和异步发送消息  </li>\n<li>Kafka的参数配置  </li>\n<li>Kafka的消息有序性 （按顺序处理Topic的所有消息，就只提供一个分区）  </li>\n<li>偏移量 提交方式： 同步与异步组合方式提交  </li>\n<li>SpringBoot结合Kafka  <ul>\n<li>用yml写入kafka的一些配置  </li>\n<li>用KafkaTemplate（发送信息）  </li>\n<li>注解接收信息 @KafkaListener  </li>\n<li>序列化处理，使用JSON方法，发送消息时，将对象转为JSON字符串，然后接收消息时，将JSON字符串转化为对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ElasticSearch-搜索总结\"><a href=\"#ElasticSearch-搜索总结\" class=\"headerlink\" title=\"ElasticSearch 搜索总结\"></a>ElasticSearch 搜索总结</h2><ul>\n<li>ElasticSearch  <ul>\n<li>数据库批量导入ES  <ul>\n<li>RestHighLevelClient  </li>\n<li>要复习ES  </li>\n<li>SearchRequest  <ul>\n<li>QueryBuilders  </li>\n<li>SearchSourceBuilders</li>\n</ul>\n</li>\n<li>IndexRequest</li>\n</ul>\n</li>\n<li>保存搜索记录  <ul>\n<li>用mongodb数据库  </li>\n<li>mongoTemplate  <ul>\n<li>save  </li>\n<li>findById  </li>\n<li>find  </li>\n<li>remove</li>\n</ul>\n</li>\n<li>Query(与Criteria搭配使用，用于组合查询或排序)  <ul>\n<li>query</li>\n</ul>\n</li>\n<li>更新时间方式  <ul>\n<li>用new Date()就行</li>\n</ul>\n</li>\n<li>Sort</li>\n</ul>\n</li>\n<li>联想词查询  <ul>\n<li>实际上是模糊查询</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关注、取消、点赞等CRUD处理\"><a href=\"#关注、取消、点赞等CRUD处理\" class=\"headerlink\" title=\"关注、取消、点赞等CRUD处理\"></a>关注、取消、点赞等CRUD处理</h2><ul>\n<li>关注与取消关注  <ul>\n<li>添加到Redis，使用zset</li>\n</ul>\n</li>\n<li>点赞  <ul>\n<li>因为点赞只能点赞一次，所以要判断是否点赞，此时可以用哈希表</li>\n</ul>\n</li>\n<li>阅读  <ul>\n<li>要更新登录次数  </li>\n<li>用哈希表</li>\n</ul>\n</li>\n<li>不喜欢  <ul>\n<li>根据交流可知，似乎这个与点赞是区分的，都可以点击，也算是不足之处吧  </li>\n<li>用哈希表</li>\n</ul>\n</li>\n<li>收藏  <ul>\n<li>要判断是否已经收藏 只能收藏一次</li>\n</ul>\n</li>\n<li>每次需要使用AppThred等类时，必须在所在的微服务上添加拦截器！！！！！</li>\n</ul>\n<h2 id=\"定时任务热点文章计算（问题很大）\"><a href=\"#定时任务热点文章计算（问题很大）\" class=\"headerlink\" title=\"定时任务热点文章计算（问题很大）\"></a>定时任务热点文章计算（问题很大）</h2><ul>\n<li>定时任务框架（xxl-job也许主流？？？？ 分布式消息队列？？？？）  <ul>\n<li>定时任务框架-xxl-job 分布式任务调度框架  </li>\n<li>可以解决的问题：  <ul>\n<li>做集群任务的重复执行问题  </li>\n<li>cron表达式定义在代码中，修改不方便  </li>\n<li>定时任务失败，无法重试也没有统计  </li>\n<li>如果任务量过大，不能有效分片执行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实时任务-热点文章计算\"><a href=\"#实时任务-热点文章计算\" class=\"headerlink\" title=\"实时任务 热点文章计算\"></a>实时任务 热点文章计算</h2><ul>\n<li>SerDe是Serializer&#x2F;Deserializer的缩写。 Serdes.String().getClass() 实际上是得到一个序列化器  </li>\n<li>Topology类 这个可能要注意  </li>\n<li>重要的对象 KStream 键值类型的  </li>\n<li>Duration.ofSeconds  <ul>\n<li>KakfaStream 的flatMapValues方法：<br>在Kafka中，<code>flatMapValues</code>是一个操作符（operator），用于对每个记录的值进行扁平化处理（<strong>就是对一个数据流的数据进行分开处理</strong>），<br>并生成零个或多个新的记录。<code>flatMapValues</code>操作符的功能类似于<code>flatMap</code>操作符，但它只应用于记录的值部分，而不改变键部分。</li>\n</ul>\n</li>\n<li>Kafka的流式处理模块是单独的，需要生产者的topic和消费者的topic  </li>\n<li>需要自己添加配置类，因为SpringBoot对kafkaStream的yml集成效果不太好  <ul>\n<li>需要学习的注解  </li>\n<li>@ConfigurationProperties  </li>\n<li>@Bean  </li>\n<li>@Value</li>\n</ul>\n</li>\n<li>所谓热点文章，就是同时考虑点赞行为和阅读行为，对文章的分值进行计算，要实时的，这个可以用KafkaStream完成的。  </li>\n<li><strong>enum 枚举类或集合方法的撰写 必须要学会</strong>  </li>\n<li><strong>常量类上的方法使用 static 和 final</strong>  </li>\n<li>String.format()</li>\n</ul>\n<h2 id=\"其他补充\"><a href=\"#其他补充\" class=\"headerlink\" title=\"其他补充\"></a>其他补充</h2><ul>\n<li>mongodb处理 <ul>\n<li>分页列表并不像MP那样有插件，需要自己实现  </li>\n<li>涉及到MongoDB的数据操作，是没有mapper的，因为mongoTemplate里面有数据操作的方法</li>\n</ul>\n</li>\n</ul>\n","text":"登录 查看是否登录时，一般会看看线程是否有这个用户（网关处理时会把数据保存到线程上） MP 要掌握如何进行分页 MP在处理多个表时，有时用xml更好，尤其是在查...","permalink":"/post/（开发笔记）平台开发总结记录（随时间更新）","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"开发","slug":"开发","count":7,"path":"api/tags/开发.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%99%BB%E5%BD%95\"><span class=\"toc-text\">登录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MP\"><span class=\"toc-text\">MP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">网关</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">拦截器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BB%B6%E8%BF%9F%E4%BB%BB%E5%8A%A1-%E7%94%A8%E4%BA%8E%E5%A4%84%E7%90%86%E6%96%87%E7%AB%A0%E5%AE%9A%E6%97%B6%E5%AE%A1%E6%A0%B8%E5%92%8C%E4%B8%8A%E6%9E%B6\"><span class=\"toc-text\">延迟任务 用于处理文章定时审核和上架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Kafka-%E7%94%A8%E4%BA%8E%E9%80%9A%E7%9F%A5%E6%96%87%E7%AB%A0%E4%B8%8A%E4%B8%8B%E6%9E%B6\"><span class=\"toc-text\">Kafka 用于通知文章上下架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ElasticSearch-%E6%90%9C%E7%B4%A2%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">ElasticSearch 搜索总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E6%B3%A8%E3%80%81%E5%8F%96%E6%B6%88%E3%80%81%E7%82%B9%E8%B5%9E%E7%AD%89CRUD%E5%A4%84%E7%90%86\"><span class=\"toc-text\">关注、取消、点赞等CRUD处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0%E8%AE%A1%E7%AE%97%EF%BC%88%E9%97%AE%E9%A2%98%E5%BE%88%E5%A4%A7%EF%BC%89\"><span class=\"toc-text\">定时任务热点文章计算（问题很大）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%97%B6%E4%BB%BB%E5%8A%A1-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">实时任务 热点文章计算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">其他补充</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"（Java复习总结）Java数据类型笔记","uid":"978310dc6cad989500c585bf21064346","slug":"（Java复习总结）Java数据类型笔记","date":"2023-08-20T03:46:43.000Z","updated":"2023-09-07T05:51:59.095Z","comments":true,"path":"api/articles/（Java复习总结）Java数据类型笔记.json","keywords":null,"cover":null,"text":"二哥的Java 基本类型 字符字面量应该用单引号（’’）包围，而不是双引号（””），因为双引号表示字符串字面量 char 类型比较特殊，char 自动转换成 i...","permalink":"/post/（Java复习总结）Java数据类型笔记","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"（开发笔记）平台开发的注意事项简要记录","uid":"5da0e7c1ff981f5dde4015103b247300","slug":"（开发笔记）平台开发的注意事项简要记录","date":"2023-04-23T03:30:58.000Z","updated":"2023-09-07T03:35:45.270Z","comments":true,"path":"api/articles/（开发笔记）平台开发的注意事项简要记录.json","keywords":null,"cover":null,"text":"nacos配置问题每次正确添加nacos配置后，如果碰上某个微服务的错误，此时要考虑是不是不小心加上了无关的依赖库，尤其是okhttp 。 延迟队列问题延迟队列...","permalink":"/post/（开发笔记）平台开发的注意事项简要记录","photos":[],"count_time":{"symbolsCount":334,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"开发","slug":"开发","count":7,"path":"api/tags/开发.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}