{"title":"（开发笔记）注解总结之@RequestBody","uid":"4a84d38afea4c32655f17f427273c865","slug":"（开发笔记）注解总结之-RequestBody","date":"2023-03-10T03:28:20.000Z","updated":"2023-09-07T03:30:04.344Z","comments":true,"path":"api/articles/（开发笔记）注解总结之-RequestBody.json","keywords":null,"cover":null,"content":"<p><code>@RequestBody</code> 是一个Spring框架中的注解，用于将HTTP请求的内容（例如JSON、XML等）绑定到方法的参数上。它通常与Spring MVC或Spring Boot中的控制器方法一起使用。  </p>\n<p>使用<code>@RequestBody</code>注解时，Spring框架会自动将请求体的内容解析，并尝试将其转换为指定的参数类型。  </p>\n<p>以下是<code>@RequestBody</code>的示例用法：  </p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">UserController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">PostMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/users</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ResponseEntity</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">?</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">createUser</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">RequestBody</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">user</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 处理请求，使用接收到的User对象  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// ...  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> ResponseEntity</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">ok</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">build</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span></code></pre></div><p>在上面的示例中，<code>createUser()</code>方法使用<code>@RequestBody</code>注解来接收HTTP POST请求中的请求体，并将其转换为User对象。Spring框架会根据请求的内容类型（例如JSON）以及User类的定义，自动完成请求体到User对象的转换。  </p>\n<p>需要注意的是，在使用<code>@RequestBody</code>时，通常还需要指定请求的Content-Type。例如，如果请求的Content-Type是application&#x2F;json，则Spring会使用相应的JSON转换器将JSON字符串转换为User对象。  </p>\n<p>另外，<code>@RequestBody</code>注解还支持其他参数类型，如<code>Map&lt;String, Object&gt;</code>、<code>List&lt;User&gt;</code>等，以及自定义的数据转换器和处理器。  </p>\n<p>总之，<code>@RequestBody</code>注解允许将HTTP请求的内容转换为方法参数，并方便地在Spring框架中处理和使用请求体数据。</p>\n","text":"@RequestBody 是一个Spring框架中的注解，用于将HTTP请求的内容（例如JSON、XML等）绑定到方法的参数上。它通常与Spring MVC或S...","permalink":"/post/（开发笔记）注解总结之-RequestBody","photos":[],"count_time":{"symbolsCount":893,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"开发","slug":"开发","count":7,"path":"api/tags/开发.json"},{"name":"注解与反射","slug":"注解与反射","count":1,"path":"api/tags/注解与反射.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"（开发笔记）平台使用的技术简要总结_杂记（随时间更新）","uid":"535536b539f073c2d793d87577695f87","slug":"（开发笔记）平台使用的技术简要总结-杂记（随时间更新）","date":"2023-04-01T12:50:20.000Z","updated":"2023-09-07T02:30:48.607Z","comments":true,"path":"api/articles/（开发笔记）平台使用的技术简要总结-杂记（随时间更新）.json","keywords":null,"cover":null,"text":"JSON 阿里巴巴的fastjson StringUtils 不同的包也有不同的方法 isNotBlank 和 isEmpty也是不同的方法 BeansUtil...","permalink":"/post/（开发笔记）平台使用的技术简要总结-杂记（随时间更新）","photos":[],"count_time":{"symbolsCount":987,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"开发","slug":"开发","count":7,"path":"api/tags/开发.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"（开发笔记）平台数据库开发记录总结","uid":"a2a04591aa24c2e458792273dc89fac0","slug":"（开发笔记）平台数据库开发记录总结","date":"2023-02-21T07:42:36.000Z","updated":"2023-09-07T02:03:38.586Z","comments":true,"path":"api/articles/（开发笔记）平台数据库开发记录总结.json","keywords":null,"cover":null,"text":"添加到数据库时 如果是Mapper，一般是用insert方法或save方法 而用这些方法前，一般会设置dto类，并创建dto方法，然后用BeansUtils将传...","permalink":"/post/（开发笔记）平台数据库开发记录总结","photos":[],"count_time":{"symbolsCount":129,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"开发","slug":"开发","count":7,"path":"api/tags/开发.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}